<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-self-tutorial(how to quickly post a blog with hexo)</title>
      <link href="2021/11/18/hexo-self-tutorial/"/>
      <url>2021/11/18/hexo-self-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="A-reminder"><a href="#A-reminder" class="headerlink" title="A reminder"></a>A reminder</h1><h2 id="Each-time-when-add-new-blogs-to-website"><a href="#Each-time-when-add-new-blogs-to-website" class="headerlink" title="Each time when add new blogs to website"></a>Each time when add new blogs to website</h2><ol><li><p>goto the <code>hexoBlog</code> folder</p></li><li><p>type <code>hexo new &quot;name of the blog&quot;</code> to create a new MarkDown file</p></li><li><p>goto the MarkDown file and write blog</p></li><li><p>exit to terminal and type <code>hexo clean</code></p></li><li><p>type <code>hexo generate</code> DONE.</p></li><li><p>type <code>hexo server</code> to start the blog locally, check if it works properly.</p></li><li><p>type <code>hexo deploy</code> to “update” the website on GitHub. </p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1D Array in C(malloc)</title>
      <link href="2020/04/26/1D%20Array%20in%20C(malloc)/"/>
      <url>2020/04/26/1D%20Array%20in%20C(malloc)/</url>
      
        <content type="html"><![CDATA[<p>An array is a container object that holds a fixed number of values of a single type. To create an array in C, we can do <code>int arr[n];</code>. Here, arr, is a variable array which holds up to <strong>10</strong> integers. The above array is a static array that has memory allocated at compile time. A dynamic array can be created in C, using the malloc function and the memory is allocated on the heap at runtime. To create an integer array, <strong>arr</strong> of size <strong>n</strong>, <code>int *arr = (int*)malloc(n * sizeof(int))</code>, where <strong>arr</strong> points to the base address of the array.</p><p>In this challenge, you have to create an array of size <strong>n</strong> dynamically, input the elements of the array, sum them and print the sum of the elements in a new line.</p><a id="more"></a><p><strong>Input Format</strong></p><p>The first line contains an integer, <strong>n</strong>.<br>The next line contains <strong>n</strong> space-separated integers.</p><p><strong>Constraints</strong></p><blockquote><p>1 &lt;= n &lt;= 1000</p><p>1 &lt;= ai &lt;= 1000</p></blockquote><p><strong>Output Format</strong></p><p>Print in a single line the sum of the integers in the array.</p><p><strong>Sample Input 0</strong></p><pre><code>616 13 7 2 1 12 </code></pre><p><strong>Sample Output 0</strong></p><pre><code>51</code></pre><p><strong>Sample Input 1</strong></p><pre><code>71 13 15 20 12 13 2 </code></pre><p><strong>Sample Output 1</strong></p><pre><code>76</code></pre><hr><p>题目要求：</p><p>输入数组长度，读取数组里边的数字，求和，要求定义动态数组要使用malloc函数实现。</p><p>下面是代码实现</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义了一个整数类型的动态数组，长度为n</span>    sum<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//scanf("%d",&amp;arr[i]);</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>arr<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处与上一行意思相同 arr+i为当前键入值的地址</span>      <span class="token comment" spellcheck="true">//sum += arr[i];</span>        sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此处与上一行意思想通过 *(arr+i) 表示取arr+i这个地址下的值</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放分配的内存</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>malloc（int <em>arr = (int</em>)malloc(n * sizeof(int));）之后要释放free（arr）</p><p>‘ * ’ 表示取当前地址的值</p><p>’&amp;‘ 表示取当前值的地址</p><p>反思：</p><p>对malloc函数使用并不清楚，以及数组的用法比如用指针定义的数组是什么样的。</p><p>对指针的运算符 理解了其含义。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo Blog build</title>
      <link href="2020/04/24/hexo-Blog-build/"/>
      <url>2020/04/24/hexo-Blog-build/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Hexo在GitHub上搭建个人博客"><a href="#基于Hexo在GitHub上搭建个人博客" class="headerlink" title="基于Hexo在GitHub上搭建个人博客"></a>基于Hexo在GitHub上搭建个人博客</h1><p>源自codesheep的学习成果，基于hexo博客框架，且搭建在GitHub上，此文章是Mac版的文字学习笔记</p><a id="more"></a><hr><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>必备组建</p><blockquote><p>在nodejs.org下载安装nodejs 以支持Hexo</p></blockquote><p>打开终端</p><blockquote><p>切换到root：<code>sudo su</code></p></blockquote><blockquote><p>查看node版本：<code>node -v</code></p></blockquote><blockquote><p>产看npm包管理器版本：<code>npm -v</code></p></blockquote><hr><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>借助npm包管理器安装hexo</p><p>（由于国内镜像源问题，可以先借助npm安装淘宝镜像cnpm，如果人在国外，可以忽略此步骤）</p><blockquote><p><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></p></blockquote><blockquote><p>registry 有注册处的意思，在这个地方表示镜像源, -g 是globe全局安装</p></blockquote><blockquote><p>安装好后 <code>cnpm -v</code> 查看版本</p></blockquote><p>（以下步骤均使用npm进行安装，替换过镜像源的话，将代码中的npm改为cnpm即可）</p><p>npm安装hexo：</p><p><code>npm install -g hexo-cli</code></p><p>安装完成后查看版本：</p><p><code>hexo -v</code></p><hr><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>使用Hexo正式搭建博客</p><blockquote><p><code>pwd</code>查看当前路径</p></blockquote><blockquote><p><code>mkdir Blog</code>新建一个名为Blog的空文件夹</p></blockquote><p>（过程中出错，直接删除此文件夹即可）</p><blockquote><p><code>cd Blog</code>进入Blog文件夹 </p></blockquote><blockquote><p>进入之后初始化你的博客<code>sudo hexo init</code></p></blockquote><blockquote><p>安装完成后<code>ls -l</code>查看该目录下安装的文件</p></blockquote><p>接下来可以启动hexo博客了</p><blockquote><p><code>hexo s</code>这行命令的意思是server hexo 一般用来启动预览hexo博客</p></blockquote><p>下一步可以在hexo博客里新建一篇文章了</p><blockquote><p><code>hexo n &quot;Your title&quot;</code>意思是new 一篇名为Your title 的hexo文章</p></blockquote><p>创建好后你可以看到该文章的路径（source/_posts），进入之后是.md格式的，修改该文章内容即可。</p><p>修改之后退回Blog文件夹</p><blockquote><p>因为进入了两层所以<code>cd ../..</code>可以退出到Blog</p></blockquote><p>做完以上步骤之后</p><blockquote><p><code>hexo clean</code> 清理一下</p><p><code>hexo g</code> generate生成一下</p></blockquote><p>然后就可以重新启动了</p><blockquote><p><code>hexo s</code></p></blockquote><p>至此本地搭建已完成</p><hr><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>将博客部署到远端（GitHub）</p><p>创建自己的GitHub账号并且新建一个repository</p><blockquote><p>需要注意的是在你命名时，必须是你的用户名 + (.github.io)</p></blockquote><p>然后回到命令行安装git工具（此处我也不知道为什么，装就完事了）</p><blockquote><p><code>npm install --save hexo-deployer-git</code></p></blockquote><p>接下来设置 _config.yml 这个文件</p><p>使用编辑器将此文件打开 例如vim</p><blockquote><p><code>vim _config.yml</code></p></blockquote><p>进入之后按住 shift+g 跳转到行尾，可以看到deploy：在这之下添加配置内容</p><blockquote><pre><code>deploy:    type: &#39;git&#39;  repo: &#39;https://github.com/a1779748/a1779748.github.io.git&#39; (此处是GitHub中给定的网址)  branch: &#39;master&#39;</code></pre></blockquote><p>完成后按esc退出到普通模式 按 :wq 保存并退出</p><blockquote><p>deploy 意思是部署</p></blockquote><p>接下来将本地博客部署到远端</p><blockquote><p><code>hexo d</code>使用命令deploy hexo将其部署至远端</p><p>在此过程中需要输入GitHub的用户名和密码 按提示输入即可</p></blockquote><p>进入GitHub可以看到仓库多了很多东西</p><p>接下来就可以用仓库名之前创建的 .github.io的那一个，进行网站的访问了</p><p>至此搭建部署全部完成。</p><hr><h4 id="接下来是一些博客美化的内容"><a href="#接下来是一些博客美化的内容" class="headerlink" title="接下来是一些博客美化的内容"></a>接下来是一些博客美化的内容</h4><ol><li><p>主题</p><p>yilia主题：</p><p><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a></p><p>首先是下载主题: </p><p><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code> </p><p>克隆完之后可以去对应的文件夹内查看：</p><blockquote><p> <code>pwd</code></p><p><code>ls -l</code></p><p><code>cd themes</code></p><p><code>ls -l</code></p></blockquote><p>接下来退回到Blog继续修改config文件</p><p>vim打开_config.yml</p><p>进入之后找到theme所在行将后边的内容改为yilia保存退出即可</p><p>做完以上步骤 </p><blockquote><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo s</code></p></blockquote><p>此时可以在本地查看预览</p><p>然后将其推到远端</p><blockquote><p><code>hexo d</code></p></blockquote><p>至此主题配置完成</p><p>在主目录下的config文件内可以修改作者姓名，修改完后还是clean， g， d</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HackerRankProblemFirst</title>
      <link href="2020/04/24/HackerRankProblemFirst/"/>
      <url>2020/04/24/HackerRankProblemFirst/</url>
      
        <content type="html"><![CDATA[<h1 id="HackerRank-first-hard-problem-for-me"><a href="#HackerRank-first-hard-problem-for-me" class="headerlink" title="HackerRank first hard problem for me"></a>HackerRank first hard problem for me</h1><hr><h4 id="conditionals-and-loops-gt-printing-pattern-using-loops"><a href="#conditionals-and-loops-gt-printing-pattern-using-loops" class="headerlink" title="conditionals and loops-&gt;printing pattern using loops"></a>conditionals and loops-&gt;printing pattern using loops</h4><p>In this problem, you need to print the pattern of the following form containing the numbers from 1 to n.</p><a id="more"></a><pre><code>                        4 4 4 4 4 4 4                          4 3 3 3 3 3 4                           4 3 2 2 2 3 4                           4 3 2 1 2 3 4                           4 3 2 2 2 3 4                           4 3 3 3 3 3 4                           4 4 4 4 4 4 4   </code></pre><p><strong>Input Format</strong></p><p>The input will contain a single integer <em>n</em>.</p><p><strong>Constraints</strong></p><p>1 $\leq$ n $\leq$ 1000</p><p><strong>Output Format</strong></p><p>Print the pattern mentioned in the problem statement.</p><p><strong>Sample Input 0</strong></p><pre><code>2</code></pre><p><strong>Sample Output 0</strong></p><pre><code>2 2 22 1 22 2 2</code></pre><p><strong>Sample Input 1</strong></p><pre><code>5</code></pre><p><strong>Sample Output 1</strong></p><pre><code>5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 5 5 4 3 3 3 3 3 4 5 5 4 3 2 2 2 3 4 5 5 4 3 2 1 2 3 4 5 5 4 3 2 2 2 3 4 5 5 4 3 3 3 3 3 4 5 5 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5</code></pre><p> 以上是原题目叙述</p><hr><h4 id="汉化理解"><a href="#汉化理解" class="headerlink" title="汉化理解"></a>汉化理解</h4><p>题目要求输入一个数字n，输出对应的图形。样例在上边已给出，就不用解释了。</p><hr><h4 id="题目思路分析"><a href="#题目思路分析" class="headerlink" title="题目思路分析"></a>题目思路分析</h4><p>观察之后，发现对于每一圈相同的数字，它与最中间的数字1的’距离‘是相同的。</p><p>举例如下：</p><pre><code> 11 12 13 14 15 -&gt;    3 3 3 3 3 21 22 23 24 25 -&gt;    3 2 2 2 3 31 32 33 34 35 -&gt;    3 2 1 2 3 41 42 43 44 45 -&gt;    3 2 2 2 3 51 52 53 54 55 -&gt;    3 3 3 3 3</code></pre><p>此时问题转化为如何计算这个‘<em>距离</em>’。</p><p>人眼观察时，我们可以直接数，但是对于计算机这种算盘式的机器，并没有我们聪明，我们就需要将问题拆分。在’33‘这个位置左上方求这个距离时，因为所有左上的坐标数都小于‘33’，我们只需要用‘33’，分别减去寻找位置的行列，取其中较大值，即为距离。举个栗子：我们要找‘12’和‘33’的距离，那么行距为3-1=2，列距为3-2=1，此时行距2较大，所以‘12’和‘33’的距离为2。同理右上，行距不变，此时列距有所变化，我们需要用寻找位置的列减去‘33’位置的列。左下，右下也是相同的道理。</p><p>求出’距离‘后。</p><p>我们需要将其打印，距离为0时，需打印1，距离为1时需打印2，以此类推，距离为n时，需打印n+1。</p><hr><h4 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>len<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>disr<span class="token punctuation">,</span>disc<span class="token punctuation">,</span>dis<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> n<span class="token operator">*</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算行列最大长度</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            disr <span class="token operator">=</span> i<span class="token operator">&lt;</span>n <span class="token operator">?</span> n<span class="token operator">-</span>i <span class="token punctuation">:</span> i<span class="token operator">-</span>n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算行距</span>            disc <span class="token operator">=</span> j<span class="token operator">&lt;</span>n <span class="token operator">?</span> n<span class="token operator">-</span>j <span class="token punctuation">:</span> j<span class="token operator">-</span>n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算列距</span>            dis <span class="token operator">=</span> disr<span class="token operator">></span>disc <span class="token operator">?</span> disr <span class="token punctuation">:</span> disc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 二者中较大的为距离</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>dis<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注释：</strong></p><p><code>condition ？true ：false</code></p><p>为三元运算符，相当于if else语句，如果不能理解，可以换用if else实现。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/04/24/hello-world/"/>
      <url>2020/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
